# ------------------------------------------------------------

# diosix - microkernel makefile
# Maintainer(s): Chris Williams (diodesign)
 
# For x86-64 PC machines 
#
# requires rust-core: https://github.com/thestinger/rust-core/

# Expects the build system to define the following:
# BUILD_ARCH, BUILD_HARDWARE, BUILD_FEATURES, KERNEL_RELEASE_MAJOR,
# KERNEL_RELEASE_MINOR, KERNEL_CODENAME, KERNEL_API_REVISION
# BUILD_RUST, BUILD_CC, BUILD_LINKER, BUILD_OBJDUMP, BUILD_STRIP
# BUILD_READELF, BUILD_ASM, BUILD_TIMESTAMP, BUILD_REVISION
# BUILD_OBJS_DIR, BUILD_HARDWARE_SRC_DIR, BUILD_MAKEFILE,
# BUILD_LINKERFILE, RELEASE_DIR, BUILD_KERNEL_SRC_DIR
# ------------------------------------------------------------

# define the build version
VERSION		= -DKERNEL_IDENTIFIER="\"diosix-$(KERNEL_CODENAME) ($(BUILD_TIMESTAMP) $(BUILD_REVISION)) " \
		  "$(BUILD_ARCH)_$(BUILD_HARDWARE) $(BUILD_FEATURES)\"" \
		  -DKERNEL_RELEASE_MAJOR=$(KERNEL_RELEASE_MAJOR) -DKERNEL_RELEASE_MINOR=$(KERNEL_RELEASE_MINOR) \
		  -DKERNEL_API_REVISION=$(KERNEL_API_REVISION)

# prettify the output
Q=@
WRITE 		= $(Q)echo 

.SUFFIXES: .s .c

# define our rust, cc, linker and nasm flags
RUST_CORE_FLAGS	= -g -O --out-dir $(BUILD_OBJS_DIR) -Z no-landing-pads
RUST_FLAGS	= $(RUST_CORE_FLAGS) -L $(BUILD_OBJS_DIR) --emit bc
CC_FLAGS	= -m64 -O3 -g \
		  -ffreestanding -mcmodel=large \
		  -mno-red-zone	-mno-mmx -mno-sse \
		  -mno-sse2 -mno-sse3 -mno-3dnow
LINK_FLAGS	= -nodefaultlibs -T$(BUILD_LINKERFILE) \
		  -z max-page-size=0x1000
ASM_FLAGS	= -felf64 -g

# build the rust-core crate name
RUST_CORE_SRC	= rust-core/core/lib.rs
RUST_CORE_CRATE = $(shell $(BUILD_RUST) --crate-file-name $(RUST_CORE_SRC)) 

# get our build executables all lined up
RUST_CORE	= $(Q)$(BUILD_RUST) $(RUST_CORE_FLAGS)
RUST		= $(Q)$(BUILD_RUST) $(RUST_FLAGS)
CC		= $(Q)$(BUILD_CC) $(CC_FLAGS)
LINK 		= $(Q)$(BUILD_LINKER) $(LINK_FLAGS)
ASM		= $(Q)$(BUILD_ASM) $(ASM_FLAGS)

# the individual pre-link components in the microkernel
OBJS		= $(BUILD_OBJS_DIR)/$(RUST_CORE_CRATE) \
                  $(BUILD_OBJS_DIR)/start.o $(BUILD_OBJS_DIR)/locore.o \
		  $(BUILD_OBJS_DIR)/glue.bc $(BUILD_OBJS_DIR)/glue.o
# the objects we'll be giving to the linker
LINK_OBJS	= $(BUILD_OBJS_DIR)/start.o $(BUILD_OBJS_DIR)/locore.o \
		  $(BUILD_OBJS_DIR)/glue.o

# targets
all: kernel mkiso

# standard cmd lines
BUILD.rs	= $(RUST) $<
BUILD.c		= $(CC) -c $< -o $@
BUILD.s		= $(ASM) $< -o $@

# port-specific assembler rules
$(BUILD_OBJS_DIR)/start.o:		$(BUILD_HARDWARE_SRC_DIR)/asm/start.s
					$(WRITE) '==> ASSEMBLE: $<'
					$(BUILD.s)

$(BUILD_OBJS_DIR)/locore.o:		$(BUILD_HARDWARE_SRC_DIR)/asm/locore.s
					$(WRITE) '==> ASSEMBLE: $<'
					$(BUILD.s)

# freestanding runtime library for the kernel. this is compiled into
# the build directory where the Rust source can find it
$(BUILD_OBJS_DIR)/$(RUST_CORE_CRATE):	$(RUST_CORE_SRC)
					$(WRITE) '==> COMPILE: $<'
					$(RUST_CORE) $<

# Kernel Rust source rules: two-stage rustc-to-clang process
$(BUILD_OBJS_DIR)/glue.bc:		$(BUILD_HARDWARE_SRC_DIR)/glue.rs
					$(WRITE) '==> COMPILE (stage 1): $<'
					$(BUILD.rs)

$(BUILD_OBJS_DIR)/glue.o:		$(BUILD_OBJS_DIR)/glue.bc
					$(WRITE) '==> COMPILE (stage 2): $<'
					$(BUILD.c)


.EXPORT_ALL_VARIABLES: ;

# link the kernel
kernel: $(OBJS) $(BUILD_LINKERFILE) $(BUILD_MAKEFILE)
	$(WRITE) '==> LINK: $< $(LINK_OBJS)'
	$(LINK) $(LINK_OBJS) $(LINK_FLAGS) -o $(BUILD_OBJS_DIR)/$@

# craft the boot ISO - XXX should this be here? (cw)
mkiso:	$(BUILD_OBJS_DIR)/kernel
	$(WRITE) '==> RELEASE: Creating boot ISO in' $(RELEASE_DIR)
	mkdir -p $(RELEASE_DIR)/boot/grub
	cp $(BUILD_HARDWARE_SRC_DIR)/iso-grub.cfg $(RELEASE_DIR)/boot/grub/grub.cfg
	cp $(BUILD_OBJS_DIR)/kernel $(RELEASE_DIR)/boot/
	touch $(RELEASE_DIR)/diosix.iso
	rm $(RELEASE_DIR)/diosix.iso
	grub-mkrescue -o $(RELEASE_DIR)/diosix.iso $(RELEASE_DIR)

